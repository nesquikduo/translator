languages_colors = {
    'C++': 'lightpink',
    'C#': 'lightblue',
    'Java': 'brown',
    'Ruby': 'red',
    'Pascal': 'lightpink',
    'Java Script': 'lightgreen',
    'Swift': 'lightyellow',
    '1C': 'purple',
    'Rust': 'pink',
    'PHP': 'blue',
    'Scala': 'red',
    'Python': 'green',
    'Не распознано': 'white'
}

language_keywords = {
    'C++': [
        '#include', 'std::cout <<', 'std::cin >>', 'std::', 'void', 'int', 'return',
        'if', 'else', 'for', 'while', 'class', 'public', 'private', 'using',
        'namespace', '->', '{', '}'],

    'C#': [
        'using', 'namespace', 'class', 'public', 'private', 'static', 'void', 'int',
        'Console.WriteLine', 'Console.ReadLine()', 'return', 'if', 'else', 'new',
        'foreach', '=>', '//'],

    'Java': [
        'import', 'public', 'class', 'static', 'void', 'int', 'System.out.println',
        'System.in.read', 'this', 'new', 'return', 'if', 'else', 'for', 'while',
        'extends', 'implements', '//'],

    'Java Script': [
        'function', 'let', 'var', 'const', 'console.log', 'prompt', 'return',
        'this', 'if', 'else', 'for', 'while', '=>', 'class', '//'],

    'Ruby': [
        'def', 'puts', 'gets', 'return', 'self', 'class', 'begin', 'end',
        'if', 'else', 'elsif', 'unless', 'yield', 'do', 'then', 'rescue',
        'module', 'require', '#'],

    'Pascal': [
        'program', 'var', 'begin', 'end', 'writeln', 'readln', 'procedure',
        'function', 'integer', 'real', 'if', 'then', 'else', ':=', '//'],

    'Swift': [
        'import', 'func', 'let', 'var', 'print', 'readLine()', 'self', 'return',
        'if', 'else', 'guard', 'class', 'struct', 'enum', 'in', '{', '}', '//'],

    'Rust': [
        'fn', 'let', 'mut', 'println!', 'self', 'return', 'if', 'else',
        'loop', 'match', 'use', 'impl', 'enum', 'struct', '|', '{', '}', '//'],

    'Scala': [
        'def', 'val', 'var', 'println', 'class', 'object', 'trait', 'if', 'else',
        'match', 'case', '=>', 'this', 'return', '{', '}', '//'],

    '1C': [
        'Процедура', 'Функция', 'КонецПроцедуры', 'Перем', 'Если', 'Тогда',
        'Иначе', 'Для', 'Каждого', 'Из', 'Цикл', 'Пока', 'Сообщить',
        'ЭтотОбъект', 'КонецЦикла', 'КонецЕсли', '//'],

    'PHP': [
        '<?php', 'echo', 'readline', 'function', '$this', '$', 'return', 'if',
        'else', 'true', 'false', 'null', 'isset', 'empty', 'foreach', 'require',
        '//'],

    'Python': [
        'def', 'print', 'input', 'import', 'class', 'self',
        'lambda', 'if', 'else', 'elif', 'for', 'while',
        'return', 'try', 'except', 'with', 'as', 'from', '#']}

translation_rules = {

    ('Python', 'C++'): {
        'def': 'void',
        'print': 'std::cout <<',
        'input': 'std::cin >>',
        'self': 'this',
        'lambda': '[]()',
        '#': '//',
        ':': '{',
        'return': 'return',
        'True': 'true',
        'False': 'false'},

    ('Python', 'Java'): {
        'def': 'public void',
        'print': 'System.out.println',
        'input': 'Scanner.nextLine()',
        'self': 'this',
        'lambda': '->',
        '#': '//',
        'return': 'return',
        'True': 'true',
        'False': 'false'},

    ('Python', 'Java Script'): {
        'def': 'function',
        'print': 'console.log',
        'input': 'prompt',
        'self': 'this',
        'lambda': '()=>',
        '#': '//',
        'return': 'return'},

    ('Python', 'C#'): {
        'def': 'void',
        'print': 'Console.WriteLine',
        'input': 'Console.ReadLine()',
        'self': 'this',
        'lambda': '=>',
        '#': '//',
        'return': 'return'},

    ('Python', 'Ruby'): {
        'def': 'def',
        'print': 'puts',
        'input': 'gets',
        'self': 'self',
        'lambda': '->',
        '#': '#',
        ':': '',
        'return': 'return'},

    ('Python', 'Swift'): {
        'def': 'func',
        'print': 'print',
        'input': 'readLine()',
        'self': 'self',
        'lambda': 'in',
        '#': '//',
        'return': 'return'},

    ('Python', 'Rust'): {
        'def': 'fn',
        'print': 'println!',
        'input': 'stdin',
        'self': 'self',
        'lambda': '|x|',
        '#': '//',
        'return': 'return'},

    ('Python', 'Scala'): {
        'def': 'def',
        'print': 'println',
        'input': 'scala.io.StdIn.readLine()',
        'self': 'this',
        'lambda': '=>',
        '#': '//',
        'return': 'return'},

    ('Python', 'Pascal'): {
        'def': 'procedure',
        'print': 'writeln',
        'input': 'readln',
        'self': '',
        '#': '//',
        'return': 'exit'},

    ('Python', '1C'): {
        'def': 'Процедура',
        'print': 'Сообщить',
        'input': '',
        'self': 'ЭтотОбъект',
        '#': '//',
        'return': ''},

    ('Python', 'PHP'): {
        'def': 'function',
        'print': 'echo',
        'input': 'readline',
        'self': '$this',
        'lambda': 'function',
        '#': '//',
        'True': 'true',
        'False': 'false',
        'None': 'null',
        'return': 'return'},

    ('C++', 'Java'): {
        '#include': 'import',
        'std::cout <<': 'System.out.println',
        'std::cin >>': 'System.in.read',
        'std::': '',
        'void': 'public void',
        'int': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'public': 'public',
        'private': 'private',
        'using': 'import',
        'namespace': 'package',
        '->': '->',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C++', 'C#'): {
        '#include': 'using',
        'std::cout <<': 'Console.WriteLine',
        'std::cin >>': 'Console.ReadLine()',
        'std::': '',
        'void': 'void',
        'int': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'public': 'public',
        'private': 'private',
        'using': 'using',
        'namespace': 'namespace',
        '->': '=>',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C++', 'Java Script'): {
        'std::cout <<': 'console.log',
        'std::cin >>': 'prompt',
        'void': 'function',
        'int': 'let',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        '->': '=>',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C++', 'Ruby'): {
        'std::cout <<': 'puts',
        'std::cin >>': 'gets',
        'void': 'def',
        'int': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'public': '',
        'private': '',
        '->': '',
        '//': '#',
        '{': '',
        '}': 'end'},

    ('C++', 'Pascal'): {
        'std::cout <<': 'writeln',
        'std::cin >>': 'readln',
        'void': 'procedure',
        'int': 'integer',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'begin': 'begin',
        'end': 'end',
        'class': 'type',
        '//': '//',
        '{': 'begin',
        '}': 'end'},

    ('C++', 'Swift'): {
        'std::cout <<': 'print',
        'std::cin >>': 'readLine()',
        'void': 'func',
        'int': 'Int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('C++', 'Rust'): {
        '#include': 'use',
        'std::cout <<': 'println!',
        'std::cin >>': '',
        'void': 'fn',
        'int': 'i32',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'struct',
        '->': '->',
        'std::': '',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('C++', 'Scala'): {
        'std::cout <<': 'println',
        'std::cin >>': '',
        'void': 'def',
        'int': 'Int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        '->': '=>',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('C++', '1C'): {
        'std::cout <<': 'Сообщить',
        'std::cin >>': '',
        'void': 'Процедура',
        'int': 'Число',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'for': 'Для',
        'while': 'Пока',
        'class': '',
        '{': '',
        '}': '',
        '//': '//'},

    ('C++', 'Python'): {
        '#include': 'import',
        'std::cout <<': 'print',
        'std::cin >>': 'input',
        'std::': '',
        'void': 'def',
        'int': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        '->': '',
        '//': '#',
        '{': ':',
        '}': ''},

    ('C++', 'PHP'): {
        '#include': '<?php',
        'std::cout <<': 'echo',
        'std::cin >>': '',
        'std::': '',
        'void': 'function',
        'int': '$',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', 'C++'): {
        'import': '#include',
        'System.out.println': 'std::cout <<',
        'System.in.read': 'std::cin >>',
        'public void': 'void',
        'int': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'public': 'public',
        'private': 'private',
        'this': 'this',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', 'C#'): {
        'import': 'using',
        'System.out.println': 'Console.WriteLine',
        'System.in.read': 'Console.ReadLine()',
        'public void': 'void',
        'int': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'public': 'public',
        'private': 'private',
        'this': 'this',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', 'Java Script'): {
        'System.out.println': 'console.log',
        'System.in.read': 'prompt',
        'public void': 'function',
        'int': 'let',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'this',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', 'Ruby'): {
        'System.out.println': 'puts',
        'System.in.read': 'gets',
        'public void': 'def',
        'int': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '//': '#',
        '{': '',
        '}': 'end'},

    ('Java', 'Pascal'): {
        'System.out.println': 'writeln',
        'System.in.read': 'readln',
        'public void': 'procedure',
        'int': 'integer',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'type',
        '//': '//',
        '{': 'begin',
        '}': 'end'},

    ('Java', 'Swift'): {
        'System.out.println': 'print',
        'System.in.read': 'readLine()',
        'public void': 'func',
        'int': 'Int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', 'Rust'): {
        'System.out.println': 'println!',
        'System.in.read': '',  #доп настройка
        'public void': 'fn',
        'int': 'i32',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'struct',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', 'Scala'): {
        'System.out.println': 'println',
        'System.in.read': 'scala.io.StdIn.readLine()',
        'public void': 'def',
        'int': 'Int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'this',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', '1C'): {
        'System.out.println': 'Сообщить',
        'System.in.read': '',
        'public void': 'Процедура',
        'int': 'Число',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'for': 'Для',
        'while': 'Пока',
        '//': '//',
        '{': '',
        '}': ''},

    ('Java', 'PHP'): {
        'import': 'require',
        'System.out.println': 'echo',
        'System.in.read': 'readline',
        'public void': 'function',
        'int': '$',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'this': '$this',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java', 'Python'): {
        'import': 'import',
        'System.out.println': 'print',
        'System.in.read': 'input',
        'public void': 'def',
        'int': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'this': 'self',
        '//': '#',
        '{': ':',
        '}': ''},

    ('C#', 'C++'): {
        'using': '#include',
        'Console.WriteLine': 'std::cout <<',
        'Console.ReadLine()': 'std::cin >>',
        'void': 'void',
        'int': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'public': 'public',
        'private': 'private',
        'this': 'this',
        '=>': '->',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C#', 'Java'): {
        'using': 'import',
        'Console.WriteLine': 'System.out.println',
        'Console.ReadLine()': 'System.in.read',
        'void': 'public void',
        'int': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'public': 'public',
        'private': 'private',
        'this': 'this',
        '=>': '->',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C#', 'Java Script'): {
        'Console.WriteLine': 'console.log',
        'Console.ReadLine()': 'prompt',
        'void': 'function',
        'int': 'let',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        '=>': '=>',
        'this': 'this',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C#', 'Ruby'): {
        'Console.WriteLine': 'puts',
        'Console.ReadLine()': 'gets',
        'void': 'def',
        'int': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '//': '#',
        '{': '',
        '}': 'end'},

    ('C#', 'Pascal'): {
        'Console.WriteLine': 'writeln',
        'Console.ReadLine()': 'readln',
        'void': 'procedure',
        'int': 'integer',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        '//': '//',
        '{': 'begin',
        '}': 'end'},

    ('C#', 'Swift'): {
        'Console.WriteLine': 'print',
        'Console.ReadLine()': 'readLine()',
        'void': 'func',
        'int': 'Int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C#', 'Rust'): {
        'Console.WriteLine': 'println!',
        'Console.ReadLine()': '',
        'void': 'fn',
        'int': 'i32',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '=>': '->',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('C#', 'Scala'): {
        'Console.WriteLine': 'println',
        'Console.ReadLine()': 'scala.io.StdIn.readLine()',
        'void': 'def',
        'int': 'Int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'this',
        '=>': '=>',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('C#', '1C'): {
        'Console.WriteLine': 'Сообщить',
        'Console.ReadLine()': '',
        'void': 'Процедура',
        'int': 'Число',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'for': 'Для',
        'while': 'Пока',
        'this': 'ЭтотОбъект',
        '{': '',
        '}': '',
        '//': '//'},

    ('C#', 'Python'): {
        'using': 'import',
        'Console.WriteLine': 'print',
        'Console.ReadLine()': 'input',
        'void': 'def',
        'int': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'this': 'self',
        '=>': 'lambda',
        '//': '#',
        '{': ':',
        '}': ''},

    ('C#', 'PHP'): {
        'using': 'require',
        'Console.WriteLine': 'echo',
        'Console.ReadLine()': 'readline',
        'void': 'function',
        'int': '$',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'class': 'class',
        'this': '$this',
        '=>': '=>',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Rust', 'C++'): {
        'println!': 'std::cout <<',
        'fn': 'void',
        'let': 'int',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while(true)',
        'match': 'switch',
        'struct': 'class',
        'enum': 'enum',
        'use': '#include',
        'impl': '',
        '|': '',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Rust', 'Java'): {
        'println!': 'System.out.println',
        'fn': 'public void',
        'let': 'int',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while(true)',
        'match': 'switch',
        'struct': 'class',
        'enum': 'enum',
        'use': 'import',
        'impl': '',
        '|': '',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Rust', 'C#'): {
        'println!': 'Console.WriteLine',
        'fn': 'void',
        'let': 'int',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while(true)',
        'match': 'switch',
        'struct': 'class',
        'enum': 'enum',
        'use': 'using',
        'impl': '',
        '|': '',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Rust', 'Java Script'): {
        'println!': 'console.log',
        'fn': 'function',
        'let': 'let',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while(true)',
        'match': 'switch',
        'struct': 'class',
        'enum': 'enum',
        '|': '',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Rust', 'Ruby'): {
        'println!': 'puts',
        'fn': 'def',
        'let': '',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'loop do',
        'match': 'case',
        'struct': 'class',
        '|': '',
        '{': '',
        '}': 'end',
        '//': '#'},

    ('Rust', 'Pascal'): {
        'println!': 'writeln',
        'fn': 'procedure',
        'let': 'var',
        'mut': '',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while true do',
        'match': 'case',
        'struct': 'record',
        'enum': 'type',
        '|': '',
        '{': 'begin',
        '}': 'end',
        '//': '//'},

    ('Rust', 'Swift'): {
        'println!': 'print',
        'fn': 'func',
        'let': 'var',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while true',
        'match': 'switch',
        'struct': 'struct',
        'enum': 'enum',
        '|': '',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Rust', 'Scala'): {
        'println!': 'println',
        'fn': 'def',
        'let': 'var',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while(true)',
        'match': 'match',
        'struct': 'class',
        'enum': 'sealed trait',
        '|': '',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Rust', '1C'): {
        'println!': 'Сообщить',
        'fn': 'Процедура',
        'let': 'Перем',
        'mut': '',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'for': 'Для',
        'while': 'Пока',
        'loop': 'Пока Истина Цикл',
        'match': 'Выбор',
        'struct': '',
        'enum': '',
        '|': '',
        '{': '',
        '}': '',
        '//': '//'},

    ('Rust', 'Python'): {
        'println!': 'print',
        'fn': 'def',
        'let': '',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while True',
        'match': '',
        'struct': 'class',
        'enum': 'Enum',
        'use': 'import',
        'impl': '',
        '|': '',
        '//': '#',
        '{': ':',
        '}': ''},

    ('Rust', 'PHP'): {
        'println!': 'echo',
        'fn': 'function',
        'let': '$',
        'mut': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'loop': 'while(true)',
        'match': 'switch',
        'struct': 'class',
        'enum': '',
        'use': 'require',
        'impl': '',
        '|': '',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Scala', 'C++'): {
        'println': 'std::cout <<',
        'def': 'void',
        'val': 'const',
        'var': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'switch',
        'case': 'case',
        'class': 'class',
        'trait': 'class',
        'object': '',
        '=>': '->',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Scala', 'Java'): {
        'println': 'System.out.println',
        'def': 'public void',
        'val': 'final',
        'var': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'switch',
        'case': 'case',
        'class': 'class',
        'trait': 'interface',
        'object': '',
        '=>': '->',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Scala', 'C#'): {
        'println': 'Console.WriteLine',
        'def': 'void',
        'val': 'readonly',
        'var': 'int',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'switch',
        'case': 'case',
        'class': 'class',
        'trait': 'interface',
        'object': '',
        '=>': '=>',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Scala', 'Java Script'): {
        'println': 'console.log',
        'def': 'function',
        'val': 'const',
        'var': 'let',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'switch',
        'case': 'case',
        'class': 'class',
        'trait': '',
        'object': '',
        '=>': '=>',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Scala', 'Ruby'): {
        'println': 'puts',
        'def': 'def',
        'val': '',
        'var': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'case',
        'case': 'when',
        'class': 'class',
        'trait': 'module',
        'object': '',
        '=>': '->',
        '{': '',
        '}': 'end',
        '//': '#'},

    ('Scala', 'Pascal'): {
        'println': 'writeln',
        'def': 'procedure',
        'val': 'const',
        'var': 'var',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'match': 'case',
        'case': 'case',
        'class': 'type',
        'trait': '',
        'object': '',
        '=>': ':=',
        '{': 'begin',
        '}': 'end',
        '//': '//'},

    ('Scala', 'Swift'): {
        'println': 'print',
        'def': 'func',
        'val': 'let',
        'var': 'var',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'switch',
        'case': 'case',
        'class': 'class',
        'trait': 'protocol',
        'object': '',
        '=>': 'in',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Scala', 'Rust'): {
        'println': 'println!',
        'def': 'fn',
        'val': 'let',
        'var': 'let mut',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'match',
        'case': '',
        'class': 'struct',
        'trait': 'trait',
        'object': '',
        '=>': '=>',
        '{': '{',
        '}': '}',
        '//': '//'},

    ('Scala', '1C'): {
        'println': 'Сообщить',
        'def': 'Процедура',
        'val': 'Перем',
        'var': 'Перем',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'match': 'Выбор',
        'case': 'Когда',
        'class': '',
        'trait': '',
        'object': '',
        '=>': '',
        '{': '',
        '}': '',
        '//': '//'},

    ('Scala', 'Python'): {
        'println': 'print',
        'def': 'def',
        'val': '',
        'var': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': '',
        'case': '',
        'class': 'class',
        'trait': '',
        'object': '',
        '=>': 'lambda',
        '//': '#',
        '{': ':',
        '}': ''},

    ('Scala', 'PHP'): {
        'println': 'echo',
        'def': 'function',
        'val': '$',
        'var': '$',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'match': 'switch',
        'case': 'case',
        'class': 'class',
        'trait': 'interface',
        'object': '',
        '=>': '=>',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Ruby', 'Python'): {
        'def': 'def',
        'puts': 'print',
        'gets': 'input',
        'self': 'self',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'elsif': 'elif',
        'unless': 'if not',
        'yield': 'yield',
        'do': '',
        'then': ':',
        'rescue': 'except',
        'module': '',
        '#': '#',
        'end': ''},

    ('Ruby', 'PHP'): {
        'def': 'function',
        'puts': 'echo',
        'gets': 'readline',
        'self': '$this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'elsif': 'elseif',
        'unless': 'if (!)',
        'yield': '',
        'do': '',
        'then': '',
        'rescue': 'catch',
        'module': '',
        '#': '//',
        'end': ''},

    ('Ruby', 'C++'): {
        'def': 'void',
        'puts': 'std::cout <<',
        'gets': 'std::cin >>',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': '}'},

    ('Ruby', 'Java'): {
        'def': 'public void',
        'puts': 'System.out.println',
        'gets': 'System.in.read',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': '}'},

    ('Ruby', 'C#'): {
        'def': 'void',
        'puts': 'Console.WriteLine',
        'gets': 'Console.ReadLine()',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': '}'},

    ('Ruby', 'Java Script'): {
        'def': 'function',
        'puts': 'console.log',
        'gets': 'prompt',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': '}'},

    ('Ruby', 'Pascal'): {
        'def': 'procedure',
        'puts': 'writeln',
        'gets': 'readln',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': 'end'},

    ('Ruby', 'Swift'): {
        'def': 'func',
        'puts': 'print',
        'gets': 'readLine()',
        'self': 'self',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': '}'},

    ('Ruby', 'Rust'): {
        'def': 'fn',
        'puts': 'println!',
        'gets': '',
        'self': 'self',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': '}'},

    ('Ruby', 'Scala'): {
        'def': 'def',
        'puts': 'println',
        'gets': 'scala.io.StdIn.readLine()',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        '#': '//',
        'end': '}'},

    ('Ruby', '1C'): {
        'def': 'Процедура',
        'puts': 'Сообщить',
        'gets': '',
        'self': 'ЭтотОбъект',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'elsif': 'ИначеЕсли',
        'unless': 'Если НЕ',
        'do': '',
        'then': 'Тогда',
        'rescue': 'Исключение',
        'module': '',
        '#': '//',
        'end': 'КонецПроцедуры'},

    ('Pascal', 'Python'): {
        'procedure': 'def',
        'function': 'def',
        'writeln': 'print',
        'readln': 'input',
        'var': '',
        'integer': '',
        'real': '',
        'begin': '',
        'end': '',
        'return': 'return',
        'if': 'if',
        'then': ':',
        'else': 'else',
        ':=': '=',
        '//': '#'},

    ('Pascal', 'PHP'): {
        'procedure': 'function',
        'function': 'function',
        'writeln': 'echo',
        'readln': 'readline',
        'var': '$',
        'integer': '',
        'real': '',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Pascal', '1C'): {
        'procedure': 'Процедура',
        'function': 'Функция',
        'writeln': 'Сообщить',
        'readln': '',
        'var': 'Перем',
        'integer': 'Число',
        'real': 'Число',
        'begin': '',
        'end': 'КонецПроцедуры',
        'return': '',
        'if': 'Если',
        'then': 'Тогда',
        'else': 'Иначе',
        ':=': '=',
        '//': '//'},

    ('Pascal', 'C++'): {
        'procedure': 'void',
        'function': 'int',
        'writeln': 'std::cout <<',
        'readln': 'std::cin >>',
        'var': 'int',
        'integer': 'int',
        'real': 'float',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Pascal', 'Java'): {
        'procedure': 'public void',
        'function': 'public int',
        'writeln': 'System.out.println',
        'readln': 'System.in.read',
        'var': 'int',
        'integer': 'int',
        'real': 'float',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Pascal', 'C#'): {
        'procedure': 'void',
        'function': 'int',
        'writeln': 'Console.WriteLine',
        'readln': 'Console.ReadLine()',
        'var': 'int',
        'integer': 'int',
        'real': 'float',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Pascal', 'Java Script'): {
        'procedure': 'function',
        'function': 'function',
        'writeln': 'console.log',
        'readln': 'prompt',
        'var': 'let',
        'integer': '',
        'real': '',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Pascal', 'Ruby'): {
        'procedure': 'def',
        'function': 'def',
        'writeln': 'puts',
        'readln': 'gets',
        'var': '',
        'integer': '',
        'real': '',
        'begin': '',
        'end': 'end',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '#'},

    ('Pascal', 'Swift'): {
        'procedure': 'func',
        'function': 'func',
        'writeln': 'print',
        'readln': 'readLine()',
        'var': 'var',
        'integer': 'Int',
        'real': 'Double',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Pascal', 'Rust'): {
        'procedure': 'fn',
        'function': 'fn',
        'writeln': 'println!',
        'readln': '',
        'var': 'let',
        'integer': 'i32',
        'real': 'f64',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Pascal', 'Scala'): {
        'procedure': 'def',
        'function': 'def',
        'writeln': 'println',
        'readln': 'scala.io.StdIn.readLine()',
        'var': 'var',
        'integer': 'Int',
        'real': 'Double',
        'begin': '{',
        'end': '}',
        'return': 'return',
        'if': 'if',
        'then': '',
        'else': 'else',
        ':=': '=',
        '//': '//'},

    ('Swift', 'Python'): {
        'func': 'def',
        'print': 'print',
        'readLine()': 'input',
        'self': 'self',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': '',
        'var': '',
        'class': 'class',
        'struct': 'class',
        'enum': 'Enum',
        'in': '',
        '//': '#',
        '{': ':',
        '}': ''},

    ('Swift', 'PHP'): {
        'func': 'function',
        'print': 'echo',
        'readLine()': 'readline',
        'self': '$this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': '$',
        'var': '$',
        'class': 'class',
        'struct': 'class',
        'enum': '',
        'in': '',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Swift', '1C'): {
        'func': 'Процедура',
        'print': 'Сообщить',
        'readLine()': '',
        'self': 'ЭтотОбъект',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'let': 'Перем',
        'var': 'Перем',
        'class': '',
        'struct': '',
        'enum': '',
        'in': '',
        '//': '//',
        '{': '',
        '}': ''},

    ('Swift', 'C++'): {
        'func': 'void',
        'print': 'std::cout <<',
        'readLine()': 'std::cin >>',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': 'const',
        'var': 'auto',
        'class': 'class',
        'struct': 'struct',
        'enum': 'enum',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Swift', 'Java'): {
        'func': 'public void',
        'print': 'System.out.println',
        'readLine()': 'System.in.read',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': 'final',
        'var': 'int',
        'class': 'class',
        'struct': 'class',
        'enum': 'enum',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Swift', 'C#'): {
        'func': 'void',
        'print': 'Console.WriteLine',
        'readLine()': 'Console.ReadLine()',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': 'readonly',
        'var': 'int',
        'class': 'class',
        'struct': 'struct',
        'enum': 'enum',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Swift', 'Java Script'): {
        'func': 'function',
        'print': 'console.log',
        'readLine()': 'prompt',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': 'const',
        'var': 'let',
        'class': 'class',
        'struct': 'class',
        'enum': '',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Swift', 'Ruby'): {
        'func': 'def',
        'print': 'puts',
        'readLine()': 'gets',
        'self': 'self',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': '',
        'var': '',
        'class': 'class',
        'struct': 'class',
        'enum': '',
        '//': '#',
        '{': '',
        '}': 'end'},

    ('Swift', 'Pascal'): {
        'func': 'procedure',
        'print': 'writeln',
        'readLine()': 'readln',
        'self': '',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'let': 'const',
        'var': 'var',
        'class': 'type',
        'struct': 'record',
        'enum': 'type',
        '//': '//',
        '{': 'begin',
        '}': 'end'},

    ('Swift', 'Rust'): {
        'func': 'fn',
        'print': 'println!',
        'readLine()': '',
        'self': 'self',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': 'let',
        'var': 'let mut',
        'class': 'struct',
        'struct': 'struct',
        'enum': 'enum',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Swift', 'Scala'): {
        'func': 'def',
        'print': 'println',
        'readLine()': 'scala.io.StdIn.readLine()',
        'self': 'this',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'let': 'val',
        'var': 'var',
        'class': 'class',
        'struct': 'class',
        'enum': 'sealed trait',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java Script', 'Python'): {
        'function': 'def',
        'console.log': 'print',
        'prompt': 'input',
        'let': '',
        'var': '',
        'const': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '=>': 'lambda',
        'class': 'class',
        '//': '#',
        '{': ':',
        '}': ''},

    ('Java Script', 'PHP'): {
        'function': 'function',
        'console.log': 'echo',
        'prompt': 'readline',
        'let': '$',
        'var': '$',
        'const': '$',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': '$this',
        '=>': '=>',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java Script', '1C'): {
        'function': 'Процедура',
        'console.log': 'Сообщить',
        'prompt': '',
        'let': 'Перем',
        'var': 'Перем',
        'const': 'Перем',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'for': 'Для',
        'while': 'Пока',
        'this': 'ЭтотОбъект',
        '=>': '',
        'class': '',
        '//': '//',
        '{': '',
        '}': ''},

    ('Java Script', 'C++'): {
        'function': 'void',
        'console.log': 'std::cout <<',
        'prompt': 'std::cin >>',
        'let': 'int',
        'var': 'int',
        'const': 'const',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'this',
        '=>': '->',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java Script', 'Java'): {
        'function': 'public void',
        'console.log': 'System.out.println',
        'prompt': 'System.in.read',
        'let': 'int',
        'var': 'int',
        'const': 'final',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'this',
        '=>': '->',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java Script', 'C#'): {
        'function': 'void',
        'console.log': 'Console.WriteLine',
        'prompt': 'Console.ReadLine()',
        'let': 'int',
        'var': 'int',
        'const': 'readonly',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'this',
        '=>': '=>',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java Script', 'Ruby'): {
        'function': 'def',
        'console.log': 'puts',
        'prompt': 'gets',
        'let': '',
        'var': '',
        'const': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '=>': '->',
        'class': 'class',
        '//': '#',
        '{': '',
        '}': 'end'},

    ('Java Script', 'Pascal'): {
        'function': 'procedure',
        'console.log': 'writeln',
        'prompt': 'readln',
        'let': 'var',
        'var': 'var',
        'const': 'const',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': '',
        '=>': '',
        'class': 'type',
        '//': '//',
        '{': 'begin',
        '}': 'end'},

    ('Java Script', 'Swift'): {
        'function': 'func',
        'console.log': 'print',
        'prompt': 'readLine()',
        'let': 'var',
        'var': 'var',
        'const': 'let',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '=>': 'in',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java Script', 'Rust'): {
        'function': 'fn',
        'console.log': 'println!',
        'prompt': '',
        'let': 'let',
        'var': 'let mut',
        'const': 'let',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'self',
        '=>': '=>',
        'class': 'struct',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('Java Script', 'Scala'): {
        'function': 'def',
        'console.log': 'println',
        'prompt': 'scala.io.StdIn.readLine()',
        'let': 'var',
        'var': 'var',
        'const': 'val',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'for': 'for',
        'while': 'while',
        'this': 'this',
        '=>': '=>',
        'class': 'class',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('PHP', 'Python'): {
        'echo': 'print',
        'readline': 'input',
        'function': 'def',
        '$this': 'self',
        '$': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'True',
        'false': 'False',
        'null': 'None',
        '//': '#',
        '{': ':',
        '}': ''},

    ('PHP', '1C'): {
        'echo': 'Сообщить',
        'readline': '',
        'function': 'Процедура',
        '$this': 'ЭтотОбъект',
        '$': '',
        'return': '',
        'if': 'Если',
        'else': 'Иначе',
        'true': 'Истина',
        'false': 'Ложь',
        'null': '',
        '//': '//',
        '{': '',
        '}': ''},

    ('PHP', 'C++'): {
        'echo': 'std::cout <<',
        'readline': 'std::cin >>',
        'function': 'void',
        '$': 'int ',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('PHP', 'Java'): {
        'echo': 'System.out.println',
        'readline': 'System.in.read',
        'function': 'public void',
        '$': 'int ',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('PHP', 'C#'): {
        'echo': 'Console.WriteLine',
        'readline': 'Console.ReadLine()',
        'function': 'void',
        '$': 'int ',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('PHP', 'Java Script'): {
        'echo': 'console.log',
        'readline': 'prompt',
        'function': 'function',
        '$': 'let ',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('PHP', 'Ruby'): {
        'echo': 'puts',
        'readline': 'gets',
        'function': 'def',
        '$': '',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '#',
        '{': '',
        '}': 'end'},

    ('PHP', 'Pascal'): {
        'echo': 'writeln',
        'readline': 'readln',
        'function': 'procedure',
        '$': 'var ',
        'return': 'exit',
        'if': 'if',
        'else': 'else',
        'true': 'True',
        'false': 'False',
        '//': '//',
        '{': 'begin',
        '}': 'end'},

    ('PHP', 'Swift'): {
        'echo': 'print',
        'readline': 'readLine()',
        'function': 'func',
        '$': 'var ',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('PHP', 'Rust'): {
        'echo': 'println!',
        'readline': '',
        'function': 'fn',
        '$': 'let ',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('PHP', 'Scala'): {
        'echo': 'println',
        'readline': 'scala.io.StdIn.readLine()',
        'function': 'def',
        '$': 'var ',
        'return': 'return',
        'if': 'if',
        'else': 'else',
        'true': 'true',
        'false': 'false',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'Python'): {
        'Процедура': 'def',
        'Функция': 'def',
        'Сообщить': 'print',
        'Перем': '',
        'ЭтотОбъект': 'self',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        'Цикл': '',
        'КонецЦикла': '',
        'КонецЕсли': '',
        'КонецПроцедуры': '',
        '//': '#',
        '{': ':',
        '}': ''},

    ('1C', 'PHP'): {
        'Процедура': 'function',
        'Функция': 'function',
        'Сообщить': 'echo',
        'Перем': '$',
        'ЭтотОбъект': '$this',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        'Цикл': '',
        'КонецЦикла': '',
        'КонецЕсли': '',
        'КонецПроцедуры': '',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'C++'): {
        'Процедура': 'void',
        'Функция': 'int',
        'Сообщить': 'std::cout <<',
        'Перем': 'int',
        'ЭтотОбъект': 'this',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'Java'): {
        'Процедура': 'public void',
        'Функция': 'public int',
        'Сообщить': 'System.out.println',
        'Перем': 'int',
        'ЭтотОбъект': 'this',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'C#'): {
        'Процедура': 'void',
        'Функция': 'int',
        'Сообщить': 'Console.WriteLine',
        'Перем': 'int',
        'ЭтотОбъект': 'this',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'Java Script'): {
        'Процедура': 'function',
        'Функция': 'function',
        'Сообщить': 'console.log',
        'Перем': 'let',
        'ЭтотОбъект': 'this',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'Ruby'): {
        'Процедура': 'def',
        'Функция': 'def',
        'Сообщить': 'puts',
        'Перем': '',
        'ЭтотОбъект': 'self',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '#',
        '{': '',
        '}': 'end'},

    ('1C', 'Pascal'): {
        'Процедура': 'procedure',
        'Функция': 'function',
        'Сообщить': 'writeln',
        'Перем': 'var',
        'ЭтотОбъект': '',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': 'begin',
        '}': 'end'},

    ('1C', 'Swift'): {
        'Процедура': 'func',
        'Функция': 'func',
        'Сообщить': 'print',
        'Перем': 'var',
        'ЭтотОбъект': 'self',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'Rust'): {
        'Процедура': 'fn',
        'Функция': 'fn',
        'Сообщить': 'println!',
        'Перем': 'let',
        'ЭтотОбъект': 'self',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': '{',
        '}': '}'},

    ('1C', 'Scala'): {
        'Процедура': 'def',
        'Функция': 'def',
        'Сообщить': 'println',
        'Перем': 'var',
        'ЭтотОбъект': 'this',
        'Если': 'if',
        'Иначе': 'else',
        'Для': 'for',
        'Пока': 'while',
        '//': '//',
        '{': '{',
        '}': '}'}
}

